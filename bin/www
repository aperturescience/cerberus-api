#!/usr/bin/env node

var fs        = require('fs');
var app       = require('../app');
var debug     = require('debug')('analytics-api:server');
var https     = require('https');

var wss       = require('../wss');

var port = normalizePort(process.env.PORT || 64000);
app.set('port', port);

var options = {
  key     : fs.readFileSync(process.env.SSL_KEY),
  cert    : fs.readFileSync(process.env.SSL_CERT),
  ciphers : 'ECDH+AESGCM:ECDH+AES256:ECDH+AES128:ECDH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS'
};

// Create HTTP server.
var server = https.createServer(options, app);

// Create WebSocket Server
wss.create();

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
